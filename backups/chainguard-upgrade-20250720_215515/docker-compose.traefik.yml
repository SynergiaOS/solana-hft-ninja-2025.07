version: '3.8'

# 🐳 Traefik v3 Docker Setup - Drop-in Alternative to Caddy
# Complete production-ready reverse proxy with automatic SSL and container discovery
# Zero-cost alternative with enterprise-grade features

networks:
  traefik:
    external: false
  hft-network:
    external: false

volumes:
  traefik-certificates:
    driver: local
  traefik-logs:
    driver: local

services:
  # =============================================================================
  # 🚀 Traefik v3 - Main Reverse Proxy
  # =============================================================================
  traefik:
    image: traefik:v3.1
    container_name: traefik-gateway
    restart: unless-stopped
    
    command:
      # API and Dashboard
      - "--api.dashboard=true"
      - "--api.debug=true"
      
      # Entrypoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.traefik.address=:8080"
      
      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik"
      
      # Certificate Resolvers
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.email=admin@hft-ninja.com"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      
      # Global redirect to HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      
      # Logging
      - "--log.level=INFO"
      - "--log.filepath=/var/log/traefik/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--accesslog.format=json"
      
      # Metrics
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.addentrypointslabels=true"
      - "--metrics.prometheus.addserviceslabels=true"
      
      # Security
      - "--serversTransport.insecureSkipVerify=false"
      - "--global.sendAnonymousUsage=false"
    
    ports:
      - "80:80"     # HTTP
      - "443:443"   # HTTPS
      - "8080:8080" # Traefik Dashboard
    
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-certificates:/letsencrypt
      - traefik-logs:/var/log/traefik
      - ./traefik:/etc/traefik:ro
    
    networks:
      - traefik
      - hft-network
    
    labels:
      # Enable Traefik for this service
      - "traefik.enable=true"
      
      # Dashboard
      - "traefik.http.routers.dashboard.rule=Host(`traefik.hft-ninja.com`)"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      
      # Basic Auth for Dashboard (admin:admin123)
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$2y$$10$$DLKjKQKQKQKQKQKQKQKQKe"
      
      # Security Headers
      - "traefik.http.middlewares.security-headers.headers.frameDeny=true"
      - "traefik.http.middlewares.security-headers.headers.sslRedirect=true"
      - "traefik.http.middlewares.security-headers.headers.browserXssFilter=true"
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.forceSTSHeader=true"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      
      # Rate Limiting
      - "traefik.http.middlewares.rate-limit.ratelimit.average=100"
      - "traefik.http.middlewares.rate-limit.ratelimit.period=1m"
      - "traefik.http.middlewares.rate-limit.ratelimit.burst=50"
      
      # AI Rate Limiting (stricter)
      - "traefik.http.middlewares.ai-rate-limit.ratelimit.average=10"
      - "traefik.http.middlewares.ai-rate-limit.ratelimit.period=1m"
      - "traefik.http.middlewares.ai-rate-limit.ratelimit.burst=5"
    
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    environment:
      - TRAEFIK_LOG_LEVEL=INFO

  # =============================================================================
  # 🧮 DeepSeek-Math AI Service - Primary Instance
  # =============================================================================
  deepseek-math-primary:
    build:
      context: ./cerebro
      dockerfile: Dockerfile.deepseek
    container_name: deepseek-math-ai-primary
    restart: unless-stopped

    environment:
      - MODEL_NAME=deepseek-ai/deepseek-math-7b-instruct
      - USE_QUANTIZATION=true
      - MAX_DAILY_AI_COST=1.0
      - PREFER_CACHE=true
      - INSTANCE_ID=primary
      - GPU_MEMORY_FRACTION=0.8

    volumes:
      - ./cerebro/models:/app/models
      - ./cerebro/cache:/app/cache
      - ./logs:/app/logs

    networks:
      - hft-network
      - traefik

    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # AI API Routes with Load Balancing
      - "traefik.http.routers.ai-api.rule=Host(`api.hft-ninja.com`) && PathPrefix(`/ai/`)"
      - "traefik.http.routers.ai-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.ai-api.middlewares=ai-rate-limit,security-headers,ai-circuit-breaker"
      - "traefik.http.routers.ai-api.service=ai-backend"

      # Load Balancer Service Definition
      - "traefik.http.services.ai-backend.loadbalancer.server.port=8003"
      - "traefik.http.services.ai-backend.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.ai-backend.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.ai-backend.loadbalancer.healthcheck.timeout=10s"

      # Circuit Breaker for AI Stability
      - "traefik.http.middlewares.ai-circuit-breaker.circuitbreaker.expression=NetworkErrorRatio() > 0.3 || ResponseCodeRatio(500, 600, 0, 600) > 0.3"
      - "traefik.http.middlewares.ai-circuit-breaker.circuitbreaker.checkperiod=10s"
      - "traefik.http.middlewares.ai-circuit-breaker.circuitbreaker.fallbackduration=30s"
      - "traefik.http.middlewares.ai-circuit-breaker.circuitbreaker.recoveryduration=10s"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # =============================================================================
  # 🧮 DeepSeek-Math AI Service - Secondary Instance (Auto-scaling)
  # =============================================================================
  deepseek-math-secondary:
    build:
      context: ./cerebro
      dockerfile: Dockerfile.deepseek
    container_name: deepseek-math-ai-secondary
    restart: unless-stopped
    profiles: ["scaling"]  # Only start when scaling profile is active

    environment:
      - MODEL_NAME=deepseek-ai/deepseek-math-7b-instruct
      - USE_QUANTIZATION=true
      - MAX_DAILY_AI_COST=0.5
      - PREFER_CACHE=true
      - INSTANCE_ID=secondary
      - GPU_MEMORY_FRACTION=0.4

    volumes:
      - ./cerebro/models:/app/models
      - ./cerebro/cache:/app/cache
      - ./logs:/app/logs

    networks:
      - hft-network
      - traefik

    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # Same service as primary for load balancing
      - "traefik.http.services.ai-backend.loadbalancer.server.port=8003"
      - "traefik.http.services.ai-backend.loadbalancer.healthcheck.path=/health"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # =============================================================================
  # 📊 Cerebro BFF Service
  # =============================================================================
  cerebro-bff:
    build:
      context: ./cerebro/bff
      dockerfile: Dockerfile
    container_name: cerebro-bff
    restart: unless-stopped
    
    environment:
      - ENVIRONMENT=production
      - HFT_NINJA_API_URL=http://hft-ninja:8080
      - AI_API_URL=http://deepseek-math:8003
      - DRAGONFLY_URL=${DRAGONFLY_URL}
    
    volumes:
      - ./logs:/app/logs
    
    networks:
      - hft-network
      - traefik
    
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      
      # BFF API Routes
      - "traefik.http.routers.bff-api.rule=Host(`api.hft-ninja.com`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.bff-api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.bff-api.middlewares=rate-limit,security-headers"
      - "traefik.http.services.bff-api.loadbalancer.server.port=8002"
      
      # Health Check
      - "traefik.http.routers.bff-health.rule=Host(`api.hft-ninja.com`) && Path(`/health`)"
      - "traefik.http.routers.bff-health.tls.certresolver=letsencrypt"
      - "traefik.http.routers.bff-health.middlewares=rate-limit,security-headers"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    depends_on:
      - deepseek-math

  # =============================================================================
  # 🥷 HFT Ninja Core Trading Engine
  # =============================================================================
  hft-ninja-core:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hft-ninja-core
    restart: unless-stopped

    environment:
      - RUST_LOG=info
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.devnet.solana.com}
      - PRIVATE_KEY_PATH=/app/config/wallet.json
      - ENGINE_MODE=core
      - MAX_POSITION_SIZE=2.0

    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro  # For dynamic strategy management

    networks:
      - hft-network
      - traefik

    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # Core Trading API Routes
      - "traefik.http.routers.trading-core.rule=Host(`api.hft-ninja.com`) && PathPrefix(`/core/`)"
      - "traefik.http.routers.trading-core.tls.certresolver=letsencrypt"
      - "traefik.http.routers.trading-core.middlewares=trading-rate-limit,security-headers,trading-auth"
      - "traefik.http.services.trading-core.loadbalancer.server.port=8080"

      # Trading Authentication Middleware
      - "traefik.http.middlewares.trading-auth.basicauth.users=trader:$$2y$$10$$DLKjKQKQKQKQKQKQKQKQKe"

      # Trading Rate Limiting (stricter for core operations)
      - "traefik.http.middlewares.trading-rate-limit.ratelimit.average=20"
      - "traefik.http.middlewares.trading-rate-limit.ratelimit.period=1m"
      - "traefik.http.middlewares.trading-rate-limit.ratelimit.burst=10"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # =============================================================================
  # 🎯 Strategy: Sandwich Trading
  # =============================================================================
  strategy-sandwich:
    build:
      context: .
      dockerfile: Dockerfile.strategy
      args:
        STRATEGY_TYPE: sandwich
    container_name: strategy-sandwich
    restart: unless-stopped

    environment:
      - RUST_LOG=info
      - STRATEGY_NAME=sandwich
      - MAX_SLIPPAGE=0.01
      - MIN_PROFIT_THRESHOLD=0.003
      - CORE_ENGINE_URL=http://hft-ninja-core:8080

    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs

    networks:
      - hft-network
      - traefik

    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # Strategy API Routes
      - "traefik.http.routers.strategy-sandwich.rule=Host(`api.hft-ninja.com`) && PathPrefix(`/strategies/sandwich`)"
      - "traefik.http.routers.strategy-sandwich.tls.certresolver=letsencrypt"
      - "traefik.http.routers.strategy-sandwich.middlewares=strategy-rate-limit,security-headers"
      - "traefik.http.services.strategy-sandwich.loadbalancer.server.port=8081"

      # Strategy Rate Limiting
      - "traefik.http.middlewares.strategy-rate-limit.ratelimit.average=50"
      - "traefik.http.middlewares.strategy-rate-limit.ratelimit.period=1m"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    depends_on:
      - hft-ninja-core

  # =============================================================================
  # 🔄 Strategy: Arbitrage Trading
  # =============================================================================
  strategy-arbitrage:
    build:
      context: .
      dockerfile: Dockerfile.strategy
      args:
        STRATEGY_TYPE: arbitrage
    container_name: strategy-arbitrage
    restart: unless-stopped

    environment:
      - RUST_LOG=info
      - STRATEGY_NAME=arbitrage
      - MIN_PRICE_DIFF=0.005
      - MAX_TRADE_SIZE=1.0
      - CORE_ENGINE_URL=http://hft-ninja-core:8080

    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs

    networks:
      - hft-network
      - traefik

    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # Strategy API Routes
      - "traefik.http.routers.strategy-arbitrage.rule=Host(`api.hft-ninja.com`) && PathPrefix(`/strategies/arbitrage`)"
      - "traefik.http.routers.strategy-arbitrage.tls.certresolver=letsencrypt"
      - "traefik.http.routers.strategy-arbitrage.middlewares=strategy-rate-limit,security-headers"
      - "traefik.http.services.strategy-arbitrage.loadbalancer.server.port=8082"

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    depends_on:
      - hft-ninja-core

  # =============================================================================
  # 🎨 React Frontend
  # =============================================================================
  frontend:
    build:
      context: ./hft-ninja-frontend
      dockerfile: Dockerfile
    container_name: hft-ninja-frontend
    restart: unless-stopped
    
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://api.hft-ninja.com
    
    networks:
      - traefik
    
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      
      # Frontend Routes
      - "traefik.http.routers.frontend.rule=Host(`hft-ninja.com`) || Host(`www.hft-ninja.com`)"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=rate-limit,security-headers"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"
      
      # WWW redirect
      - "traefik.http.middlewares.www-redirect.redirectregex.regex=^https://www.hft-ninja.com/(.*)"
      - "traefik.http.middlewares.www-redirect.redirectregex.replacement=https://hft-ninja.com/$${1}"
      - "traefik.http.middlewares.www-redirect.redirectregex.permanent=true"
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # 📊 Redis Cache
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    
    volumes:
      - redis-data:/data
    
    networks:
      - hft-network
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # =============================================================================
  # 📈 Prometheus Monitoring
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    networks:
      - hft-network
      - traefik
    
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      
      # Prometheus Dashboard
      - "traefik.http.routers.prometheus.rule=Host(`metrics.hft-ninja.com`)"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=auth,security-headers"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # =============================================================================
  # 📊 Grafana Dashboard
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    networks:
      - hft-network
      - traefik
    
    labels:
      # Enable Traefik
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      
      # Grafana Dashboard
      - "traefik.http.routers.grafana.rule=Host(`dashboard.hft-ninja.com`)"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.routers.grafana.middlewares=security-headers"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    
    depends_on:
      - prometheus

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
