version: '3.8'

services:
  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - hft-ninja
      - grafana
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main HFT application
  hft-ninja:
    build:
      context: ../../
      dockerfile: Dockerfile
    container_name: solana-hft-ninja-prod
    restart: unless-stopped
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=1
      - ENVIRONMENT=production
      - HELIUS_KEY=${HELIUS_KEY}
      - SOLANA_RPC_URL=${SOLANA_RPC_URL:-https://api.mainnet-beta.solana.com}
      - JITO_BLOCK_ENGINE_URL=${JITO_BLOCK_ENGINE_URL:-https://mainnet.block-engine.jito.wtf}
      - METRICS_PORT=8080
      - ENABLE_MONITORING=true
    volumes:
      - ../../config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    expose:
      - "8080"
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # React Frontend
  frontend:
    build:
      context: ../../hft-ninja-frontend
      dockerfile: Dockerfile.prod
    container_name: hft-ninja-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=https://hft.yourdomain.com/api
      - REACT_APP_WS_URL=wss://hft.yourdomain.com/ws
    expose:
      - "80"
    networks:
      - hft-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    expose:
      - "9090"
    networks:
      - hft-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=hft.yourdomain.com
      - GF_SERVER_ROOT_URL=https://hft.yourdomain.com/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    expose:
      - "3000"
    networks:
      - hft-network
    depends_on:
      - prometheus

  # Redis for caching and session management
  redis:
    image: redis:alpine
    container_name: redis-cache
    restart: unless-stopped
    volumes:
      - redis_data:/data
    expose:
      - "6379"
    networks:
      - hft-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  hft-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
