# üöÄ Solana HFT Ninja - Devnet Configuration
# Safe testing environment with proper TOML structure

[solana]
rpc_url = "https://api.devnet.solana.com"
ws_url = "wss://api.devnet.solana.com"
commitment = "confirmed"
rpc_timeout_ms = 10000

[helius]
api_key = "edbcd361-78a0-4998-bd1e-8d4666722f82"
rpc_url = "https://devnet.helius-rpc.com/?api-key=edbcd361-78a0-4998-bd1e-8d4666722f82"
ws_url = "wss://devnet.helius-rpc.com/?api-key=edbcd361-78a0-4998-bd1e-8d4666722f82"
enable_mempool = true

[wallet]
path = "config/wallet.json"
auto_approve = true

[trading]
max_position_size = 0.5
default_slippage = 0.02  # 2%
execution_timeout_ms = 5000

[risk]
max_daily_loss = 1.0
max_position_size = 0.5
stop_loss_percentage = 0.02  # 2%
take_profit_percentage = 0.03  # 3%

[api]
port = 8080
cors_enabled = true
rate_limit = 100

[metrics]
port = 9090
enabled = true
export_interval_ms = 5000

[strategies]
enabled = ["arbitrage", "sandwich"]
config_path = "config/strategies.toml"

# ü•™ MEV Strategy Configuration for Devnet Testing
[mev]
sandwich_enabled = true
arbitrage_enabled = true
token_launch_enabled = false  # Disabled for initial testing
min_sandwich_amount = 5000  # 0.005 SOL in lamports (reduced for devnet)
min_arbitrage_profit_bps = 30  # 0.3% (reduced for devnet)
max_sandwich_slippage_bps = 500  # 5% (increased for devnet volatility)

# üîÑ Jupiter Integration for Devnet
[jupiter]
enabled = true
api_url = "https://quote-api.jup.ag/v6"
slippage_bps = 300  # 3%
max_accounts = 64
versioned_transactions = true

# ‚ö° Jito Bundle Configuration for Devnet
[jito]
enabled = false  # Disabled for initial devnet testing
tip_account = "96gYZGLnJYVFmbjzopPSU6QiEV5fGqZNyN9nmNhvrZU5"
max_tip_lamports = 50000  # Reduced for devnet
bundle_timeout_ms = 3000  # Reduced timeout
max_retries = 2

# Risk configuration moved to line 25

[logging]
rust_log = "info"
log_level = "info"
log_file_path = "logs/hft.log"

[monitoring]
metrics_port = 8080
health_check_interval_ms = 30000
enable_ddos_protection = true
rate_limit_rps = 100

# üîç Wallet Tracker Strategy - Developer Following
[wallet_tracker]
enabled = true
scan_interval_ms = 30000  # Co 30 sekund
depth_level = 3           # 3 poziomy powiƒÖza≈Ñ
min_success_rate = 0.65   # Tylko developerzy z 65% sukcesem
fresh_wallet_cap = 0.3    # Max 30% kapita≈Çu na nowe portfele
min_liquidity_sol = 5.0   # 5 SOL p≈Çynno≈õci minimum
max_creator_share = 0.2   # Max 20% supply u tw√≥rcy
risk_model = "xgboost_v3"
risk_update_interval_ms = 21600000  # 6h

# Target wallets to track (successful devs)
tracked_wallets = [
    "EEC7mX2cut2JMGP3soancH2HNMKTw4Q7ADbCfDQFgggs",  # Your 25$ wallet
    "DSJXCqXuRckDhSX34oiFgEQChuezxvVgkEAyaA2MML8X"   # Our main wallet
]

# Risk thresholds
max_rug_score = 0.15
min_behavior_score = 0.85
max_suspicious_connections = 3
min_holder_count = 50

# Position sizing
base_position_sol = 0.1
max_position_sol = 0.5
risk_multiplier = 2.0

# üß† OUMI AI Integration - Advanced AI Framework
[oumi_ai]
enabled = true
model_path = "models/oumi-trading-v1"
inference_mode = "real_time"
batch_size = 32
max_sequence_length = 512
temperature = 0.7
top_p = 0.9
fine_tuning_enabled = true
training_data_path = "data/trading_patterns"
model_update_interval_hours = 24

# Model capabilities
multi_modal = true
text_analysis = true
price_prediction = true
sentiment_analysis = true
risk_assessment = true

# Performance settings
gpu_acceleration = true
quantization = "int8"
memory_optimization = true
parallel_inference = true

# üîç OpenSearch AI Integration - Intelligent Search & Analytics
[opensearch_ai]
enabled = true
endpoint = "http://localhost:9200"
index_prefix = "hft_ninja"
vector_dimensions = 768
similarity_algorithm = "cosine"
refresh_interval = "1s"

# Indices configuration
[opensearch_ai.indices]
market_patterns = "hft_ninja_patterns"
wallet_behaviors = "hft_ninja_wallets"
price_movements = "hft_ninja_prices"
transaction_flows = "hft_ninja_transactions"
mev_opportunities = "hft_ninja_mev"

# Vector search settings
[opensearch_ai.vector_search]
enabled = true
embedding_model = "sentence-transformers/all-MiniLM-L6-v2"
search_timeout_ms = 100
max_results = 50
min_score = 0.7

# Real-time analytics
[opensearch_ai.analytics]
anomaly_detection = true
trend_analysis = true
correlation_analysis = true
predictive_modeling = true
real_time_alerts = true

# Performance optimization
[opensearch_ai.performance]
bulk_size = 1000
flush_interval_ms = 5000
refresh_policy = "wait_for"
replica_count = 0
shard_count = 1

# üöÄ LMCache Integration - High-Performance AI Model Caching
[lmcache]
enabled = true
cache_size_mb = 512
ttl_seconds = 3600  # 1 hour
compression_enabled = true
eviction_policy = "LRU"
persistence_enabled = true
persistence_path = "cache/lmcache"
metrics_enabled = true

# Distributed caching (optional)
distributed_cache = false
redis_url = "redis://localhost:6379"

# Cache performance settings
max_concurrent_requests = 100
cache_warming_enabled = true
preload_models = ["oumi-trading-v1", "sentiment-analyzer"]

# ü§ñ AI Integration - Combined AI Configuration
[ai]
enabled = true
cross_validation = true
ensemble_predictions = true
confidence_threshold = 0.7
update_interval_seconds = 30

# AI performance optimization
parallel_inference = true
batch_processing = true
max_batch_size = 32
inference_timeout_ms = 1000

# Model management
auto_model_updates = true
model_version_tracking = true
fallback_models = ["backup-trading-model"]

# üîó Cerebro Integration - Rust ‚Üî Python Communication
[cerebro]
enabled = true
bff_url = "http://localhost:8002"
timeout_seconds = 5
retry_attempts = 3
retry_delay_ms = 1000
batch_size = 10
flush_interval_ms = 5000

# Event filtering
send_opportunities = true
send_executions = true
send_risk_events = true
send_wallet_events = true

# Performance settings
async_sending = true
queue_size = 1000
health_check_interval_seconds = 60
