name: üîí Chainguard Ultra-Security Build

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - 'Dockerfile'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      enable_security_scan:
        description: 'Enable Security Scanning'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: üîç Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run Clippy security lints
        run: cargo clippy --all-targets --all-features -- -D warnings -W clippy::all

      - name: Check code formatting
        run: cargo fmt --all -- --check

  build-chainguard-static:
    name: üõ°Ô∏è Build Chainguard Static
    runs-on: ubuntu-latest
    needs: security-audit
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=chainguard-static
            type=raw,value=production,enable={{is_default_branch}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Chainguard Static image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  security-scan:
    name: üîç Security Scan
    runs-on: ubuntu-latest
    needs: build-chainguard-static
    if: ${{ github.event.inputs.enable_security_scan != 'false' }}
    permissions:
      security-events: write
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-chainguard-static.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ needs.build-chainguard-static.outputs.image-tag }}
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  build-frontend:
    name: üåê Build Frontend
    runs-on: ubuntu-latest
    needs: security-audit
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=chainguard-nginx
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./hft-ninja-frontend
          file: ./hft-ninja-frontend/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-deepseek:
    name: üß† Build DeepSeek AI
    runs-on: ubuntu-latest
    needs: security-audit
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-deepseek
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=chainguard-static
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push DeepSeek image
        uses: docker/build-push-action@v5
        with:
          context: ./cerebro
          file: ./cerebro/Dockerfile.deepseek
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  performance-test:
    name: ‚ö° Performance Test
    runs-on: ubuntu-latest
    needs: build-chainguard-static
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Pull built image
        run: docker pull ${{ needs.build-chainguard-static.outputs.image-tag }}

      - name: Run performance benchmark
        run: |
          echo "üöÄ Running HFT Ninja performance tests..."
          docker run --rm ${{ needs.build-chainguard-static.outputs.image-tag }} benchmark || true
          
      - name: Test image size efficiency
        run: |
          IMAGE_SIZE=$(docker images ${{ needs.build-chainguard-static.outputs.image-tag }} --format "table {{.Size}}" | tail -n 1)
          echo "üì¶ Final image size: $IMAGE_SIZE"
          
          # Verify image is under 15MB (ultra-efficient)
          SIZE_MB=$(docker images ${{ needs.build-chainguard-static.outputs.image-tag }} --format "{{.Size}}" | tail -n 1 | sed 's/MB//')
          if (( $(echo "$SIZE_MB < 15" | bc -l) )); then
            echo "‚úÖ Image size optimal: ${SIZE_MB}MB < 15MB"
          else
            echo "‚ö†Ô∏è Image size warning: ${SIZE_MB}MB >= 15MB"
          fi

  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-chainguard-static, build-frontend, build-deepseek, performance-test]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.deploy_environment == 'staging'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Main Engine: ${{ needs.build-chainguard-static.outputs.image-tag }}"
          # Add your staging deployment logic here

  deploy-production:
    name: üèÜ Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-chainguard-static, build-frontend, build-deepseek, performance-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.deploy_environment == 'production'
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "üèÜ Deploying to production environment..."
          echo "Main Engine: ${{ needs.build-chainguard-static.outputs.image-tag }}"
          # Add your production deployment logic here

  notify-success:
    name: üéâ Notify Success
    runs-on: ubuntu-latest
    needs: [build-chainguard-static, build-frontend, build-deepseek]
    if: success()
    steps:
      - name: Success notification
        run: |
          echo "üéâ Chainguard Ultra-Security Build completed successfully!"
          echo "üîí Main Engine: ${{ needs.build-chainguard-static.outputs.image-tag }}"
          echo "üåê Frontend: Built and pushed"
          echo "üß† DeepSeek AI: Built and pushed"
          echo "‚ú® All images are production-ready with enterprise-grade security!"
