# React Dashboard ARM64 Dockerfile for Oracle Free Tier
# Optimized for ARM Ampere architecture with minimal resource usage
# Target: 512 MB RAM usage on 24 GB Oracle Free Tier instance

# Build stage - ARM64 Node.js
FROM node:18-alpine as builder

# Set platform and architecture
ARG BUILDPLATFORM=linux/arm64
ARG TARGETPLATFORM=linux/arm64

# ARM64 optimization flags
ENV ARM_OPTIMIZATION=1
ENV NODE_OPTIONS="--max-old-space-size=1024"

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with ARM64 optimizations
RUN npm ci --only=production --no-audit --no-fund && \
    npm cache clean --force

# Copy source code
COPY src/ ./src/
COPY public/ ./public/
COPY tailwind.config.js ./
COPY postcss.config.js ./
COPY tsconfig.json ./

# Build the application with ARM64 optimizations
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false
ENV IMAGE_INLINE_SIZE_LIMIT=0

RUN npm run build

# Production stage - minimal ARM64 Nginx
FROM nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/build /usr/share/nginx/html

# Create ARM64 optimized Nginx configuration
RUN cat > /etc/nginx/nginx.conf << 'EOF'
user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# ARM64 optimizations
worker_rlimit_nofile 1024;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log /var/log/nginx/access.log main;

    # Performance optimizations for ARM64
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 30;
    types_hash_max_size 2048;
    server_tokens off;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting for ARM64 (lower limits)
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=30r/s;

    server {
        listen 3000;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            limit_req zone=static burst=10 nodelay;
        }

        # API proxy to HFT Ninja
        location /api/ {
            proxy_pass http://hft-ninja:8080/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            limit_req zone=api burst=5 nodelay;
        }

        # AI API proxy to DeepSeek-Math
        location /ai/ {
            proxy_pass http://deepseek-math:8003/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            limit_req zone=api burst=3 nodelay;
        }

        # React Router support
        location / {
            try_files $uri $uri/ /index.html;
            limit_req zone=static burst=20 nodelay;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Deny access to hidden files
        location ~ /\. {
            deny all;
        }
    }
}
EOF

# Create startup script with ARM64 optimizations
RUN cat > /docker-entrypoint.d/arm64-optimization.sh << 'EOF'
#!/bin/sh

# ARM64 Nginx optimizations
echo "Setting up ARM64 optimizations for Nginx..."

# Calculate optimal worker processes for ARM64
WORKER_PROCESSES=$(nproc)
if [ $WORKER_PROCESSES -gt 2 ]; then
    WORKER_PROCESSES=2
fi

# Update worker processes in nginx.conf
sed -i "s/worker_processes auto;/worker_processes $WORKER_PROCESSES;/" /etc/nginx/nginx.conf

echo "ARM64 optimization complete - using $WORKER_PROCESSES worker processes"
EOF

RUN chmod +x /docker-entrypoint.d/arm64-optimization.sh

# Health check script
RUN cat > /health-check.sh << 'EOF'
#!/bin/sh
curl -f http://localhost:3000/health || exit 1
EOF

RUN chmod +x /health-check.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD /health-check.sh

# Use default Nginx entrypoint with ARM64 optimizations
CMD ["nginx", "-g", "daemon off;"]

# Metadata
LABEL maintainer="Solana HFT Ninja Team"
LABEL description="React Dashboard ARM64 optimized for Oracle Free Tier"
LABEL version="2025.07.18"
LABEL architecture="arm64"
LABEL oracle.free-tier="true"
LABEL memory.limit="512MB"
LABEL cpu.limit="0.5"
