#!/bin/bash

# üîê Solana HFT Ninja - Wallet Status Checker
# Check wallet configuration and balance

set -e

echo "üîê Solana HFT Ninja - Wallet Status"
echo "==================================="

# Check if solana CLI is installed
if ! command -v solana &> /dev/null; then
    echo "‚ùå Solana CLI not found. Please install first."
    exit 1
fi

# Check wallet files
echo "üìÅ Checking wallet files..."
if [ -f "config/wallet.json" ]; then
    echo "‚úÖ config/wallet.json exists"
    
    # Get public key
    PUBKEY=$(solana-keygen pubkey config/wallet.json 2>/dev/null || echo "‚ùå Invalid wallet file")
    
    if [[ $PUBKEY == "‚ùå"* ]]; then
        echo "‚ùå config/wallet.json is invalid or corrupted"
    else
        echo "üîë Public Key: $PUBKEY"
        
        # Check balance on different networks
        echo ""
        echo "üí∞ Balance Check:"
        echo "=================="
        
        echo "üìä Mainnet Balance:"
        MAINNET_BALANCE=$(solana balance $PUBKEY --url mainnet-beta 2>/dev/null || echo "Error")
        echo "   $MAINNET_BALANCE"
        
        echo "üìä Devnet Balance:"
        DEVNET_BALANCE=$(solana balance $PUBKEY --url devnet 2>/dev/null || echo "Error")
        echo "   $DEVNET_BALANCE"
        
        echo "üìä Testnet Balance:"
        TESTNET_BALANCE=$(solana balance $PUBKEY --url testnet 2>/dev/null || echo "Error")
        echo "   $TESTNET_BALANCE"
        
        # Check if wallet is funded
        if [[ $MAINNET_BALANCE == *"0 SOL"* ]]; then
            echo ""
            echo "‚ö†Ô∏è  WARNING: Wallet has 0 SOL on mainnet!"
            echo "üí∞ Fund your wallet before trading:"
            echo "   ‚Ä¢ Send SOL from another wallet"
            echo "   ‚Ä¢ Use an exchange to deposit"
            echo "   ‚Ä¢ For testing, use devnet: solana airdrop 1 $PUBKEY --url devnet"
        fi
    fi
else
    echo "‚ùå config/wallet.json not found"
    echo ""
    echo "üîß To create a wallet, run:"
    echo "   ./scripts/generate-wallet.sh    # Generate new wallet"
    echo "   ./scripts/import-wallet.sh      # Import existing wallet"
fi

if [ -f "config/keypair.json" ]; then
    echo "‚úÖ config/keypair.json exists"
else
    echo "‚ùå config/keypair.json not found"
fi

# Check environment configuration
echo ""
echo "‚öôÔ∏è  Environment Configuration:"
echo "=============================="

if [ -f ".env" ]; then
    echo "‚úÖ .env file exists"
    
    # Check wallet paths in .env
    PRIVATE_KEY_PATH=$(grep "PRIVATE_KEY_PATH" .env | cut -d'=' -f2 || echo "")
    KEYPAIR_PATH=$(grep "KEYPAIR_PATH" .env | cut -d'=' -f2 || echo "")
    
    echo "üìÅ PRIVATE_KEY_PATH: $PRIVATE_KEY_PATH"
    echo "üìÅ KEYPAIR_PATH: $KEYPAIR_PATH"
    
    # Check if paths match actual files
    if [[ "$PRIVATE_KEY_PATH" == *"wallet.json"* ]] && [ -f "config/wallet.json" ]; then
        echo "‚úÖ Wallet path configuration matches"
    else
        echo "‚ö†Ô∏è  Wallet path configuration mismatch"
    fi
else
    echo "‚ùå .env file not found"
fi

# Check Infisical configuration
echo ""
echo "üîê Infisical Configuration:"
echo "=========================="

if [ -f "infisical.json" ]; then
    echo "‚úÖ infisical.json exists"
    PROJECT_ID=$(grep "projectId" infisical.json | cut -d'"' -f4)
    echo "üìã Project ID: $PROJECT_ID"
    
    if command -v infisical &> /dev/null; then
        echo "‚úÖ Infisical CLI installed"
        
        # Check if logged in and can access secrets
        if infisical secrets --projectId="$PROJECT_ID" --env="production" &> /dev/null; then
            echo "‚úÖ Infisical access working"
            echo "üîç Available secrets:"
            infisical secrets --projectId="$PROJECT_ID" --env="production" | grep -E "(WALLET|PRIVATE)" || echo "   No wallet secrets found"
        else
            echo "‚ùå Cannot access Infisical secrets (login required?)"
        fi
    else
        echo "‚ùå Infisical CLI not installed"
    fi
else
    echo "‚ùå infisical.json not found"
fi

echo ""
echo "üöÄ Ready to Trade?"
echo "=================="
if [ -f "config/wallet.json" ] && [[ $PUBKEY != "‚ùå"* ]] && [[ $MAINNET_BALANCE != *"0 SOL"* ]]; then
    echo "‚úÖ Wallet is configured and funded!"
    echo "üöÄ Start trading with: ./scripts/start.sh"
else
    echo "‚ö†Ô∏è  Wallet setup incomplete:"
    [ ! -f "config/wallet.json" ] && echo "   ‚Ä¢ Create wallet: ./scripts/generate-wallet.sh"
    [[ $PUBKEY == "‚ùå"* ]] && echo "   ‚Ä¢ Fix wallet file: ./scripts/import-wallet.sh"
    [[ $MAINNET_BALANCE == *"0 SOL"* ]] && echo "   ‚Ä¢ Fund wallet with SOL"
fi
