{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8580,"byte_end":8587,"line_start":238,"line_end":238,"column_start":47,"column_end":54,"is_primary":true,"text":[{"text":"    time_fraction_dyn(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":47,"highlight_end":54}],"label":"multiple `quarter` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Datelike` for the type `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `ChronoDateExt` for the type `T`","code":null,"level":"note","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":5175,"byte_end":5199,"line_start":147,"line_end":147,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    fn quarter(&self) -> u32 {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method for candidate #1","code":null,"level":"help","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8578,"byte_end":8589,"line_start":238,"line_end":238,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    time_fraction_dyn(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"Datelike::quarter(&t)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method for candidate #2","code":null,"level":"help","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8578,"byte_end":8589,"line_start":238,"line_end":238,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    time_fraction_dyn(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"ChronoDateExt::quarter(&t)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m: multiple applicable items in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs:238:47\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    time_fraction_dyn(array, \"quarter\", |t| t.quarter() as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `quarter` found\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Datelike` for the type `NaiveDateTime`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `ChronoDateExt` for the type `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs:147:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn quarter(&self) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method for candidate #1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    time_fraction_dyn(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;9mt.quarter()\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    time_fraction_dyn(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;10mDatelike::quarter(&t)\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method for candidate #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    time_fraction_dyn(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;9mt.quarter()\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    time_fraction_dyn(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;10mChronoDateExt::quarter(&t)\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"multiple applicable items in scope","code":{"code":"E0034","explanation":"The compiler doesn't know what method to call because more than one method\nhas the same prototype.\n\nErroneous code example:\n\n```compile_fail,E0034\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // error, which foo() to call?\n}\n```\n\nTo avoid this error, you have to keep only one of them and remove the others.\nSo let's take our example and fix it:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\n\nfn main() {\n    Test::foo() // and now that's good!\n}\n```\n\nHowever, a better solution would be using fully explicit naming of type and\ntrait:\n\n```\nstruct Test;\n\ntrait Trait1 {\n    fn foo();\n}\n\ntrait Trait2 {\n    fn foo();\n}\n\nimpl Trait1 for Test { fn foo() {} }\nimpl Trait2 for Test { fn foo() {} }\n\nfn main() {\n    <Test as Trait1>::foo()\n}\n```\n\nOne last example:\n\n```\ntrait F {\n    fn m(&self);\n}\n\ntrait G {\n    fn m(&self);\n}\n\nstruct X;\n\nimpl F for X { fn m(&self) { println!(\"I am F\"); } }\nimpl G for X { fn m(&self) { println!(\"I am G\"); } }\n\nfn main() {\n    let f = X;\n\n    F::m(&f); // it displays \"I am F\"\n    G::m(&f); // it displays \"I am G\"\n}\n```\n"},"level":"error","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8927,"byte_end":8934,"line_start":248,"line_end":248,"column_start":52,"column_end":59,"is_primary":true,"text":[{"text":"    time_fraction_internal(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":52,"highlight_end":59}],"label":"multiple `quarter` found","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"candidate #1 is defined in an impl of the trait `Datelike` for the type `NaiveDateTime`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"candidate #2 is defined in an impl of the trait `ChronoDateExt` for the type `T`","code":null,"level":"note","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":5175,"byte_end":5199,"line_start":147,"line_end":147,"column_start":5,"column_end":29,"is_primary":true,"text":[{"text":"    fn quarter(&self) -> u32 {","highlight_start":5,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method for candidate #1","code":null,"level":"help","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8925,"byte_end":8936,"line_start":248,"line_end":248,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"    time_fraction_internal(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":"Datelike::quarter(&t)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null},{"message":"disambiguate the method for candidate #2","code":null,"level":"help","spans":[{"file_name":"/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs","byte_start":8925,"byte_end":8936,"line_start":248,"line_end":248,"column_start":50,"column_end":61,"is_primary":true,"text":[{"text":"    time_fraction_internal(array, \"quarter\", |t| t.quarter() as i32)","highlight_start":50,"highlight_end":61}],"label":null,"suggested_replacement":"ChronoDateExt::quarter(&t)","suggestion_applicability":"HasPlaceholders","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0034]\u001b[0m\u001b[0m\u001b[1m: multiple applicable items in scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs:248:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    time_fraction_internal(array, \"quarter\", |t| t.quarter() as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mmultiple `quarter` found\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: candidate #1 is defined in an impl of the trait `Datelike` for the type `NaiveDateTime`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: candidate #2 is defined in an impl of the trait `ChronoDateExt` for the type `T`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/marcin/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/arrow-arith-50.0.0/src/temporal.rs:147:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m147\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn quarter(&self) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method for candidate #1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    time_fraction_internal(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;9mt.quarter()\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    time_fraction_internal(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;10mDatelike::quarter(&t)\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: disambiguate the method for candidate #2\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    time_fraction_internal(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;9mt.quarter()\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    time_fraction_internal(array, \"quarter\", |t| \u001b[0m\u001b[0m\u001b[38;5;10mChronoDateExt::quarter(&t)\u001b[0m\u001b[0m as i32)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 2 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 2 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0034`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0034`.\u001b[0m\n"}
