# Daily Market Sentiment Analysis Flow
# Analyzes market sentiment and provides strategic recommendations

id: daily_sentiment_analysis
namespace: cerebro.analysis

description: |
  Daily comprehensive market sentiment analysis for Solana ecosystem.
  Collects data from multiple sources, analyzes trends, and provides actionable insights.

labels:
  environment: "{{ vars.environment }}"
  type: "sentiment_analysis"
  frequency: "daily"

inputs:
  - id: include_social_sentiment
    type: BOOLEAN
    defaults: true
    description: "Include social media sentiment analysis"
    
  - id: market_depth
    type: SELECT
    defaults: "solana_ecosystem"
    values:
      - "solana_only"
      - "solana_ecosystem" 
      - "full_crypto"
    description: "Scope of market analysis"

variables:
  cerebro_api_url: "{{ vars.cerebro_api_url }}"
  coingecko_api: "https://api.coingecko.com/api/v3"
  birdeye_api: "https://public-api.birdeye.so"

tasks:
  # 1. Collect Solana Price Data
  - id: collect_solana_data
    type: io.kestra.core.tasks.flows.Http
    description: "Fetch Solana price and market data"
    uri: "{{ vars.coingecko_api }}/coins/solana"
    method: GET
    timeout: PT30S
    options:
      localization: false
      tickers: false
      market_data: true
      community_data: true
      developer_data: false

  # 2. Collect DEX Data
  - id: collect_dex_data
    type: io.kestra.core.tasks.flows.Http
    description: "Fetch Solana DEX trading data"
    uri: "{{ vars.birdeye_api }}/defi/overview"
    method: GET
    timeout: PT30S
    headers:
      X-API-KEY: "{{ vars.birdeye_api_key }}"

  # 3. Collect Social Sentiment (if enabled)
  - id: collect_social_sentiment
    type: io.kestra.core.tasks.scripts.Python
    condition: "{{ inputs.include_social_sentiment }}"
    description: "Analyze social media sentiment"
    docker:
      image: python:3.11-slim
    beforeCommands:
      - pip install requests tweepy textblob pandas
    script: |
      import json
      import requests
      from textblob import TextBlob
      from datetime import datetime, timedelta
      
      # Simulate social sentiment analysis
      # In production, this would connect to Twitter API, Reddit API, etc.
      
      sentiment_data = {
          "sources": ["twitter", "reddit", "telegram"],
          "overall_sentiment": 0.65,  # 0-1 scale (0=very negative, 1=very positive)
          "sentiment_trend": "improving",  # improving, stable, declining
          "volume_mentions": 1250,
          "key_topics": [
              {"topic": "solana_performance", "sentiment": 0.7, "mentions": 450},
              {"topic": "defi_growth", "sentiment": 0.8, "mentions": 320},
              {"topic": "nft_activity", "sentiment": 0.5, "mentions": 280},
              {"topic": "validator_issues", "sentiment": 0.3, "mentions": 200}
          ],
          "influencer_sentiment": {
              "positive": 12,
              "neutral": 8,
              "negative": 3
          }
      }
      
      print(json.dumps(sentiment_data, indent=2))

  # 4. Analyze Market Conditions
  - id: analyze_market_conditions
    type: io.kestra.core.tasks.scripts.Python
    description: "Comprehensive market analysis"
    docker:
      image: python:3.11-slim
    beforeCommands:
      - pip install pandas numpy requests
    script: |
      import json
      import pandas as pd
      import numpy as np
      from datetime import datetime
      
      # Load data from previous tasks
      solana_data = json.loads('{{ outputs.collect_solana_data.body }}')
      dex_data = json.loads('{{ outputs.collect_dex_data.body }}')
      
      {% if inputs.include_social_sentiment %}
      social_data = json.loads('{{ outputs.collect_social_sentiment.vars.sentiment_data }}')
      {% endif %}
      
      # Extract key metrics
      current_price = solana_data['market_data']['current_price']['usd']
      price_change_24h = solana_data['market_data']['price_change_percentage_24h']
      volume_24h = solana_data['market_data']['total_volume']['usd']
      market_cap = solana_data['market_data']['market_cap']['usd']
      
      # Calculate market sentiment score
      price_sentiment = 0.5 + (price_change_24h / 100) * 0.5  # Normalize to 0-1
      price_sentiment = max(0, min(1, price_sentiment))  # Clamp to 0-1
      
      volume_trend = "high" if volume_24h > 1e9 else "medium" if volume_24h > 5e8 else "low"
      
      # Combine all sentiment indicators
      overall_sentiment = price_sentiment
      {% if inputs.include_social_sentiment %}
      overall_sentiment = (price_sentiment + social_data['overall_sentiment']) / 2
      {% endif %}
      
      # Generate market analysis
      analysis = {
          "timestamp": datetime.now().isoformat(),
          "market_data": {
              "sol_price_usd": current_price,
              "price_change_24h_pct": price_change_24h,
              "volume_24h_usd": volume_24h,
              "market_cap_usd": market_cap,
              "volume_trend": volume_trend
          },
          "sentiment_analysis": {
              "overall_score": round(overall_sentiment, 3),
              "price_sentiment": round(price_sentiment, 3),
              {% if inputs.include_social_sentiment %}
              "social_sentiment": social_data['overall_sentiment'],
              "social_volume": social_data['volume_mentions'],
              "key_topics": social_data['key_topics'][:3],  # Top 3 topics
              {% endif %}
              "sentiment_label": "bullish" if overall_sentiment > 0.6 else "bearish" if overall_sentiment < 0.4 else "neutral"
          },
          "trading_recommendations": [],
          "risk_assessment": {
              "volatility_level": "medium",  # Would calculate from price data
              "market_stability": "stable" if abs(price_change_24h) < 5 else "volatile",
              "recommended_position_size": "normal" if overall_sentiment > 0.5 else "reduced"
          }
      }
      
      # Generate specific recommendations
      if overall_sentiment > 0.7:
          analysis["trading_recommendations"].append({
              "type": "strategy_adjustment",
              "action": "increase_aggression",
              "reason": "Strong bullish sentiment detected",
              "confidence": 0.8
          })
      elif overall_sentiment < 0.3:
          analysis["trading_recommendations"].append({
              "type": "risk_management",
              "action": "reduce_exposure",
              "reason": "Strong bearish sentiment detected", 
              "confidence": 0.8
          })
      
      if volume_trend == "high":
          analysis["trading_recommendations"].append({
              "type": "opportunity",
              "action": "monitor_breakouts",
              "reason": "High volume indicates potential price movements",
              "confidence": 0.7
          })
      
      print(json.dumps(analysis, indent=2))

  # 5. Store Analysis in Memory
  - id: store_sentiment_analysis
    type: io.kestra.core.tasks.flows.Http
    description: "Store sentiment analysis in Cerebro memory"
    uri: "{{ vars.cerebro_api_url }}/api/memory/store"
    method: POST
    contentType: application/json
    body: |
      {
        "content": "{{ outputs.analyze_market_conditions.vars.analysis }}",
        "context_type": "daily_sentiment_analysis",
        "metadata": {
          "source": "kestra_daily_sentiment",
          "execution_id": "{{ execution.id }}",
          "timestamp": "{{ execution.startDate }}",
          "market_scope": "{{ inputs.market_depth }}",
          "social_included": {{ inputs.include_social_sentiment }}
        }
      }

  # 6. Generate Strategic Insights
  - id: generate_insights
    type: io.kestra.core.tasks.flows.Http
    description: "Generate strategic insights using Cerebro AI"
    uri: "{{ vars.cerebro_api_url }}/api/prompt"
    method: POST
    contentType: application/json
    body: |
      {
        "prompt": "Based on today's market sentiment analysis, provide strategic recommendations for Solana HFT trading. Market sentiment: {{ outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.sentiment_label }}, Overall score: {{ outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.overall_score }}",
        "context": {
          "type": "daily_sentiment_analysis",
          "data": "{{ outputs.analyze_market_conditions.vars.analysis }}"
        },
        "user_id": "kestra_daily_flow"
      }

  # 7. Send Daily Report
  - id: send_daily_report
    type: io.kestra.core.tasks.flows.Http
    description: "Send daily sentiment report"
    uri: "{{ vars.notification_webhook }}"
    method: POST
    contentType: application/json
    body: |
      {
        "text": "📊 Daily Solana Market Sentiment Report",
        "attachments": [
          {
            "color": "{% if outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.overall_score > 0.6 %}good{% elif outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.overall_score < 0.4 %}danger{% else %}warning{% endif %}",
            "title": "Market Sentiment Analysis - {{ execution.startDate | date('yyyy-MM-dd') }}",
            "fields": [
              {
                "title": "Overall Sentiment",
                "value": "{{ outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.sentiment_label | upper }} ({{ outputs.analyze_market_conditions.vars.analysis.sentiment_analysis.overall_score }})",
                "short": true
              },
              {
                "title": "SOL Price",
                "value": "${{ outputs.analyze_market_conditions.vars.analysis.market_data.sol_price_usd }} ({{ outputs.analyze_market_conditions.vars.analysis.market_data.price_change_24h_pct }}%)",
                "short": true
              },
              {
                "title": "Volume Trend",
                "value": "{{ outputs.analyze_market_conditions.vars.analysis.market_data.volume_trend | upper }}",
                "short": true
              },
              {
                "title": "Recommendations",
                "value": "{{ outputs.analyze_market_conditions.vars.analysis.trading_recommendations | length }} strategic recommendations generated",
                "short": true
              }
            ],
            "text": "{{ outputs.generate_insights.body.response | truncate(500) }}"
          }
        ]
      }

# Error handling
errors:
  - id: error_notification
    type: io.kestra.core.tasks.flows.Http
    description: "Send error notification"
    uri: "{{ vars.notification_webhook }}"
    method: POST
    contentType: application/json
    body: |
      {
        "text": "❌ Daily Sentiment Analysis Failed",
        "attachments": [
          {
            "color": "danger",
            "title": "Flow Execution Error - {{ execution.id }}",
            "text": "The daily sentiment analysis flow failed. Please check the logs."
          }
        ]
      }

# Triggers
triggers:
  # Run daily at 8 AM UTC
  - id: daily_schedule
    type: io.kestra.core.models.triggers.types.Schedule
    cron: "0 8 * * *"
    inputs:
      include_social_sentiment: true
      market_depth: "solana_ecosystem"

  # Manual trigger for immediate analysis
  - id: manual_trigger
    type: io.kestra.core.models.triggers.types.Webhook
    key: "sentiment_analysis_trigger"
