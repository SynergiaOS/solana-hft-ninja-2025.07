id: human_in_the_loop_trading
namespace: cerebro.trading

description: |
  Human-in-the-loop trading decisions with AI recommendations.
  Inspired by TensorZero's human oversight capabilities.

labels:
  environment: production
  team: cerebro
  category: trading
  risk_level: high

inputs:
  - id: strategy_name
    type: SELECT
    displayName: Trading Strategy
    description: Select strategy for human oversight
    values:
      - sandwich_strategy
      - arbitrage_strategy
      - liquidation_strategy
      - sniping_strategy
    defaults: sandwich_strategy

  - id: confidence_threshold
    type: FLOAT
    displayName: Confidence Threshold
    description: Minimum AI confidence for auto-execution (0.0-1.0)
    defaults: 0.85

  - id: max_position_size
    type: FLOAT
    displayName: Max Position Size (SOL)
    description: Maximum position size requiring human approval
    defaults: 2.0

variables:
  dashboard_url: "http://localhost:3001"
  notification_webhook: "{{ secret('DISCORD_WEBHOOK_URL') }}"
  approval_timeout: 300  # 5 minutes

tasks:
  - id: analyze_market_opportunity
    type: io.kestra.plugin.scripts.python.Script
    description: AI analyzes market opportunity and generates recommendation
    script: |
      import json
      import requests
      import redis
      from datetime import datetime, timedelta
      
      # Connect to DragonflyDB
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Get latest market data
      hft_response = requests.get("http://localhost:8080/api/strategies/{{ inputs.strategy_name }}/opportunities")
      market_data = hft_response.json() if hft_response.status_code == 200 else {}
      
      # AI Analysis (simplified - would use actual LLM)
      opportunity = {
          "strategy": "{{ inputs.strategy_name }}",
          "timestamp": datetime.now().isoformat(),
          "market_conditions": market_data,
          "ai_recommendation": {
              "action": "BUY" if market_data.get("profit_potential", 0) > 0.01 else "HOLD",
              "confidence": min(0.95, max(0.1, market_data.get("profit_potential", 0) * 10)),
              "position_size": min({{ inputs.max_position_size }}, market_data.get("optimal_size", 1.0)),
              "reasoning": f"Market shows {market_data.get('profit_potential', 0):.2%} profit potential",
              "risk_factors": ["High volatility", "Low liquidity"] if market_data.get("volatility", 0) > 0.1 else ["Normal conditions"]
          },
          "requires_approval": False
      }
      
      # Determine if human approval is needed
      confidence = opportunity["ai_recommendation"]["confidence"]
      position_size = opportunity["ai_recommendation"]["position_size"]
      
      if confidence < {{ inputs.confidence_threshold }} or position_size > {{ inputs.max_position_size }}:
          opportunity["requires_approval"] = True
          opportunity["approval_reason"] = []
          
          if confidence < {{ inputs.confidence_threshold }}:
              opportunity["approval_reason"].append(f"Low confidence: {confidence:.2%} < {{{ inputs.confidence_threshold }}:.2%}")
          
          if position_size > {{ inputs.max_position_size }}:
              opportunity["approval_reason"].append(f"Large position: {position_size} SOL > {{{ inputs.max_position_size }}} SOL")
      
      # Store for dashboard access
      approval_key = f"cerebro:approval:{datetime.now().strftime('%Y%m%d_%H%M%S')}"
      r.setex(approval_key, {{ vars.approval_timeout }}, json.dumps(opportunity))
      
      print(f"Analysis complete. Approval required: {opportunity['requires_approval']}")
      print(f"Confidence: {confidence:.2%}, Position: {position_size} SOL")
      
      return {
          "opportunity": opportunity,
          "approval_key": approval_key,
          "requires_approval": opportunity["requires_approval"]
      }

  - id: auto_execute_high_confidence
    type: io.kestra.plugin.scripts.python.Script
    description: Auto-execute high-confidence, low-risk trades
    runIf: "{{ outputs.analyze_market_opportunity.vars.requires_approval == false }}"
    script: |
      import requests
      import json
      
      opportunity = {{ outputs.analyze_market_opportunity.vars.opportunity }}
      
      # Execute trade automatically
      trade_request = {
          "strategy": opportunity["strategy"],
          "action": opportunity["ai_recommendation"]["action"],
          "size": opportunity["ai_recommendation"]["position_size"],
          "confidence": opportunity["ai_recommendation"]["confidence"],
          "auto_executed": True
      }
      
      response = requests.post(
          "http://localhost:8080/api/trading/execute",
          json=trade_request,
          timeout=10
      )
      
      if response.status_code == 200:
          result = response.json()
          print(f"‚úÖ Auto-executed trade: {trade_request['action']} {trade_request['size']} SOL")
          return {"status": "executed", "result": result}
      else:
          print(f"‚ùå Auto-execution failed: {response.status_code}")
          return {"status": "failed", "error": response.text}

  - id: request_human_approval
    type: io.kestra.plugin.scripts.python.Script
    description: Request human approval for high-risk trades
    runIf: "{{ outputs.analyze_market_opportunity.vars.requires_approval == true }}"
    script: |
      import requests
      import json
      
      opportunity = {{ outputs.analyze_market_opportunity.vars.opportunity }}
      approval_key = "{{ outputs.analyze_market_opportunity.vars.approval_key }}"
      
      # Send notification to Discord
      webhook_url = "{{ vars.notification_webhook }}"
      if webhook_url and webhook_url != "null":
          discord_message = {
              "embeds": [{
                  "title": "ü§ñ Trading Approval Required",
                  "description": f"AI recommends {opportunity['ai_recommendation']['action']} for {opportunity['strategy']}",
                  "color": 0xFFAA00,  # Orange
                  "fields": [
                      {"name": "Confidence", "value": f"{opportunity['ai_recommendation']['confidence']:.2%}", "inline": True},
                      {"name": "Position Size", "value": f"{opportunity['ai_recommendation']['position_size']} SOL", "inline": True},
                      {"name": "Reasoning", "value": opportunity['ai_recommendation']['reasoning'], "inline": False},
                      {"name": "Approval Reasons", "value": "\n".join(opportunity.get('approval_reason', [])), "inline": False}
                  ],
                  "footer": {"text": f"Approval Key: {approval_key}"}
              }]
          }
          
          try:
              requests.post(webhook_url, json=discord_message, timeout=10)
              print("üì± Discord notification sent")
          except Exception as e:
              print(f"‚ö†Ô∏è Failed to send Discord notification: {e}")
      
      # Create dashboard notification
      dashboard_notification = {
          "type": "approval_request",
          "title": "Trading Approval Required",
          "message": f"AI recommends {opportunity['ai_recommendation']['action']} with {opportunity['ai_recommendation']['confidence']:.2%} confidence",
          "approval_key": approval_key,
          "timestamp": opportunity["timestamp"],
          "expires_at": (datetime.now() + timedelta(seconds={{ vars.approval_timeout }})).isoformat()
      }
      
      print(f"üéØ Approval request created: {approval_key}")
      print(f"‚è∞ Expires in {{ vars.approval_timeout }} seconds")
      print(f"üåê Dashboard: {{ vars.dashboard_url }}/trading/approvals")
      
      return {
          "approval_key": approval_key,
          "notification_sent": True,
          "dashboard_url": f"{{ vars.dashboard_url }}/trading/approvals"
      }

  - id: wait_for_approval
    type: io.kestra.plugin.scripts.python.Script
    description: Wait for human approval or timeout
    runIf: "{{ outputs.analyze_market_opportunity.vars.requires_approval == true }}"
    script: |
      import redis
      import json
      import time
      from datetime import datetime
      
      approval_key = "{{ outputs.analyze_market_opportunity.vars.approval_key }}"
      timeout = {{ vars.approval_timeout }}
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      print(f"‚è≥ Waiting for approval: {approval_key}")
      print(f"‚è∞ Timeout: {timeout} seconds")
      
      start_time = time.time()
      
      while time.time() - start_time < timeout:
          # Check for approval decision
          decision_key = f"{approval_key}:decision"
          decision = r.get(decision_key)
          
          if decision:
              decision_data = json.loads(decision)
              print(f"‚úÖ Decision received: {decision_data['action']}")
              print(f"üë§ Approved by: {decision_data.get('user', 'Unknown')}")
              print(f"üí¨ Comment: {decision_data.get('comment', 'No comment')}")
              
              return {
                  "status": "decided",
                  "decision": decision_data,
                  "elapsed_time": time.time() - start_time
              }
          
          time.sleep(5)  # Check every 5 seconds
      
      print("‚è∞ Approval timeout reached")
      
      # Mark as expired
      r.delete(approval_key)
      
      return {
          "status": "timeout",
          "elapsed_time": timeout
      }

  - id: execute_approved_trade
    type: io.kestra.plugin.scripts.python.Script
    description: Execute trade after human approval
    runIf: "{{ outputs.wait_for_approval.vars.status == 'decided' and outputs.wait_for_approval.vars.decision.action == 'approve' }}"
    script: |
      import requests
      import json
      
      opportunity = {{ outputs.analyze_market_opportunity.vars.opportunity }}
      decision = {{ outputs.wait_for_approval.vars.decision }}
      
      # Execute approved trade
      trade_request = {
          "strategy": opportunity["strategy"],
          "action": opportunity["ai_recommendation"]["action"],
          "size": decision.get("adjusted_size", opportunity["ai_recommendation"]["position_size"]),
          "confidence": opportunity["ai_recommendation"]["confidence"],
          "human_approved": True,
          "approved_by": decision.get("user", "Unknown"),
          "approval_comment": decision.get("comment", "")
      }
      
      response = requests.post(
          "http://localhost:8080/api/trading/execute",
          json=trade_request,
          timeout=10
      )
      
      if response.status_code == 200:
          result = response.json()
          print(f"‚úÖ Human-approved trade executed: {trade_request['action']} {trade_request['size']} SOL")
          print(f"üë§ Approved by: {trade_request['approved_by']}")
          return {"status": "executed", "result": result}
      else:
          print(f"‚ùå Approved trade execution failed: {response.status_code}")
          return {"status": "failed", "error": response.text}

  - id: log_decision
    type: io.kestra.plugin.scripts.python.Script
    description: Log all decisions for analysis and improvement
    script: |
      import redis
      import json
      from datetime import datetime
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Collect all data from previous tasks
      log_entry = {
          "timestamp": datetime.now().isoformat(),
          "strategy": "{{ inputs.strategy_name }}",
          "opportunity": {{ outputs.analyze_market_opportunity.vars.opportunity }},
          "execution_path": "auto" if not {{ outputs.analyze_market_opportunity.vars.requires_approval }} else "human_approval",
          "final_status": "unknown"
      }
      
      # Determine final status
      if {{ outputs.analyze_market_opportunity.vars.requires_approval }}:
          if "{{ outputs.wait_for_approval.vars.status }}" == "decided":
              decision = {{ outputs.wait_for_approval.vars.decision }}
              log_entry["human_decision"] = decision
              log_entry["final_status"] = "executed" if decision["action"] == "approve" else "rejected"
          else:
              log_entry["final_status"] = "timeout"
      else:
          auto_result = {{ outputs.auto_execute_high_confidence.vars }}
          log_entry["auto_execution"] = auto_result
          log_entry["final_status"] = auto_result.get("status", "unknown")
      
      # Store in decision log
      log_key = f"cerebro:decision_log:{datetime.now().strftime('%Y%m%d_%H%M%S')}"
      r.setex(log_key, 86400 * 30, json.dumps(log_entry))  # Keep for 30 days
      
      # Add to decision history list
      r.lpush("cerebro:decision_history", log_key)
      r.ltrim("cerebro:decision_history", 0, 999)  # Keep last 1000 decisions
      
      print(f"üìä Decision logged: {log_entry['final_status']}")
      print(f"üîë Log key: {log_key}")
      
      return log_entry

triggers:
  - id: market_opportunity_trigger
    type: io.kestra.plugin.core.trigger.Schedule
    description: Check for trading opportunities every 30 seconds during market hours
    cron: "*/30 * * * * *"
    inputs:
      strategy_name: sandwich_strategy
      confidence_threshold: 0.8
      max_position_size: 1.5
