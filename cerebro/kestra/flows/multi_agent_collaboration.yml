id: multi_agent_collaboration
namespace: cerebro.agents

description: |
  Multi-agent collaboration system inspired by TensorZero.
  Different specialized agents work together to make trading decisions.

labels:
  environment: production
  team: cerebro
  category: ai_collaboration

inputs:
  - id: analysis_depth
    type: SELECT
    displayName: Analysis Depth
    description: How deep should the multi-agent analysis go
    values:
      - quick
      - standard
      - comprehensive
    defaults: standard

variables:
  agent_timeout: 60
  collaboration_session: "{{ now() | date('yyyyMMdd_HHmmss') }}"

tasks:
  # Agent 1: Market Sentiment Analyzer
  - id: sentiment_agent
    type: io.kestra.plugin.scripts.python.Script
    description: Specialized agent for market sentiment analysis
    script: |
      import json
      import redis
      import requests
      from datetime import datetime
      
      print("🎭 Sentiment Agent starting analysis...")
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Get latest scraped data
      news_data = []
      discord_data = []
      
      try:
          # Get news sentiment
          news_keys = r.keys("scrapy:news_aggregator:*")
          if news_keys:
              latest_news = r.get(sorted(news_keys)[-1])
              if latest_news:
                  news_data = json.loads(latest_news)
          
          # Get Discord sentiment
          discord_keys = r.keys("scrapy:discord_monitor:*")
          if discord_keys:
              latest_discord = r.get(sorted(discord_keys)[-1])
              if latest_discord:
                  discord_data = json.loads(latest_discord)
      except Exception as e:
          print(f"⚠️ Error getting scraped data: {e}")
      
      # Analyze sentiment (simplified)
      sentiment_score = 0.5  # Neutral baseline
      confidence = 0.7
      
      if news_data:
          positive_news = sum(1 for item in news_data if item.get('sentiment') == 'positive')
          negative_news = sum(1 for item in news_data if item.get('sentiment') == 'negative')
          
          if positive_news + negative_news > 0:
              sentiment_score = positive_news / (positive_news + negative_news)
              confidence = min(0.95, 0.5 + (positive_news + negative_news) * 0.1)
      
      analysis = {
          "agent": "sentiment_analyzer",
          "timestamp": datetime.now().isoformat(),
          "sentiment_score": sentiment_score,  # 0.0 = very bearish, 1.0 = very bullish
          "confidence": confidence,
          "data_sources": {
              "news_articles": len(news_data),
              "discord_messages": len(discord_data)
          },
          "recommendation": "bullish" if sentiment_score > 0.6 else "bearish" if sentiment_score < 0.4 else "neutral",
          "reasoning": f"Market sentiment is {sentiment_score:.2%} positive based on {len(news_data)} news articles"
      }
      
      # Store for other agents
      session_key = f"cerebro:collaboration:{{ vars.collaboration_session }}:sentiment"
      r.setex(session_key, {{ vars.agent_timeout }}, json.dumps(analysis))
      
      print(f"🎭 Sentiment Analysis: {analysis['recommendation']} ({sentiment_score:.2%})")
      return analysis

  # Agent 2: Technical Analysis Agent
  - id: technical_agent
    type: io.kestra.plugin.scripts.python.Script
    description: Specialized agent for technical analysis
    script: |
      import json
      import redis
      import requests
      from datetime import datetime
      
      print("📊 Technical Agent starting analysis...")
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Get market data from HFT Ninja
      try:
          response = requests.get("http://localhost:8080/api/market/analysis", timeout=10)
          market_data = response.json() if response.status_code == 200 else {}
      except:
          market_data = {}
      
      # Get DEX data from Scrapy
      dex_data = []
      try:
          dex_keys = r.keys("scrapy:dex_monitor:*")
          if dex_keys:
              latest_dex = r.get(sorted(dex_keys)[-1])
              if latest_dex:
                  dex_data = json.loads(latest_dex)
      except Exception as e:
          print(f"⚠️ Error getting DEX data: {e}")
      
      # Technical analysis (simplified)
      volume_trend = market_data.get("volume_24h_change", 0)
      price_momentum = market_data.get("price_momentum", 0)
      
      technical_score = 0.5 + (volume_trend * 0.3) + (price_momentum * 0.2)
      technical_score = max(0.0, min(1.0, technical_score))
      
      analysis = {
          "agent": "technical_analyzer",
          "timestamp": datetime.now().isoformat(),
          "technical_score": technical_score,
          "confidence": 0.8,
          "indicators": {
              "volume_trend": volume_trend,
              "price_momentum": price_momentum,
              "new_pairs_count": len(dex_data) if isinstance(dex_data, list) else 0
          },
          "recommendation": "buy" if technical_score > 0.6 else "sell" if technical_score < 0.4 else "hold",
          "reasoning": f"Technical indicators show {technical_score:.2%} bullish signals"
      }
      
      # Store for other agents
      session_key = f"cerebro:collaboration:{{ vars.collaboration_session }}:technical"
      r.setex(session_key, {{ vars.agent_timeout }}, json.dumps(analysis))
      
      print(f"📊 Technical Analysis: {analysis['recommendation']} ({technical_score:.2%})")
      return analysis

  # Agent 3: Risk Assessment Agent
  - id: risk_agent
    type: io.kestra.plugin.scripts.python.Script
    description: Specialized agent for risk assessment
    script: |
      import json
      import redis
      import requests
      from datetime import datetime
      
      print("🛡️ Risk Agent starting analysis...")
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Get project audit data
      audit_data = []
      try:
          audit_keys = r.keys("scrapy:project_auditor:*")
          if audit_keys:
              latest_audit = r.get(sorted(audit_keys)[-1])
              if latest_audit:
                  audit_data = json.loads(latest_audit)
      except Exception as e:
          print(f"⚠️ Error getting audit data: {e}")
      
      # Get current portfolio exposure
      try:
          response = requests.get("http://localhost:8080/api/portfolio/risk", timeout=10)
          portfolio_risk = response.json() if response.status_code == 200 else {}
      except:
          portfolio_risk = {}
      
      # Risk assessment (simplified)
      high_risk_projects = sum(1 for item in audit_data if item.get('risk_score', 0) > 7) if isinstance(audit_data, list) else 0
      portfolio_exposure = portfolio_risk.get("total_exposure_pct", 0)
      
      risk_score = 0.3  # Base risk
      if high_risk_projects > 0:
          risk_score += 0.3
      if portfolio_exposure > 0.8:
          risk_score += 0.4
      
      risk_score = max(0.0, min(1.0, risk_score))
      
      analysis = {
          "agent": "risk_assessor",
          "timestamp": datetime.now().isoformat(),
          "risk_score": risk_score,  # 0.0 = low risk, 1.0 = high risk
          "confidence": 0.85,
          "risk_factors": {
              "high_risk_projects": high_risk_projects,
              "portfolio_exposure": portfolio_exposure,
              "market_volatility": portfolio_risk.get("volatility", 0)
          },
          "recommendation": "reduce_exposure" if risk_score > 0.7 else "normal_operations" if risk_score < 0.5 else "cautious",
          "reasoning": f"Risk level is {risk_score:.2%} with {high_risk_projects} high-risk projects detected"
      }
      
      # Store for collaboration
      session_key = f"cerebro:collaboration:{{ vars.collaboration_session }}:risk"
      r.setex(session_key, {{ vars.agent_timeout }}, json.dumps(analysis))
      
      print(f"🛡️ Risk Assessment: {analysis['recommendation']} ({risk_score:.2%})")
      return analysis

  # Agent 4: Strategy Coordinator (Meta-Agent)
  - id: coordinator_agent
    type: io.kestra.plugin.scripts.python.Script
    description: Meta-agent that coordinates and synthesizes other agents' analyses
    script: |
      import json
      import redis
      import time
      from datetime import datetime
      
      print("🧠 Coordinator Agent synthesizing analyses...")
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Wait for all agents to complete (with timeout)
      session = "{{ vars.collaboration_session }}"
      required_agents = ["sentiment", "technical", "risk"]
      agent_analyses = {}
      
      max_wait = 30  # 30 seconds max wait
      start_time = time.time()
      
      while len(agent_analyses) < len(required_agents) and (time.time() - start_time) < max_wait:
          for agent in required_agents:
              if agent not in agent_analyses:
                  key = f"cerebro:collaboration:{session}:{agent}"
                  data = r.get(key)
                  if data:
                      agent_analyses[agent] = json.loads(data)
                      print(f"✅ Received analysis from {agent} agent")
          
          if len(agent_analyses) < len(required_agents):
              time.sleep(1)
      
      if len(agent_analyses) < len(required_agents):
          print(f"⚠️ Timeout: Only received {len(agent_analyses)}/{len(required_agents)} analyses")
      
      # Synthesize recommendations
      sentiment_score = agent_analyses.get("sentiment", {}).get("sentiment_score", 0.5)
      technical_score = agent_analyses.get("technical", {}).get("technical_score", 0.5)
      risk_score = agent_analyses.get("risk", {}).get("risk_score", 0.5)
      
      # Weighted synthesis (risk has veto power)
      if risk_score > 0.8:
          final_recommendation = "avoid"
          confidence = 0.9
      else:
          combined_score = (sentiment_score * 0.3) + (technical_score * 0.4) + ((1 - risk_score) * 0.3)
          
          if combined_score > 0.7:
              final_recommendation = "strong_buy"
          elif combined_score > 0.6:
              final_recommendation = "buy"
          elif combined_score > 0.4:
              final_recommendation = "hold"
          elif combined_score > 0.3:
              final_recommendation = "sell"
          else:
              final_recommendation = "strong_sell"
          
          confidence = min(0.95, 0.5 + abs(combined_score - 0.5))
      
      synthesis = {
          "coordinator": "strategy_coordinator",
          "timestamp": datetime.now().isoformat(),
          "session_id": session,
          "agent_inputs": agent_analyses,
          "synthesis": {
              "final_recommendation": final_recommendation,
              "confidence": confidence,
              "combined_score": combined_score if risk_score <= 0.8 else 0.0,
              "risk_override": risk_score > 0.8
          },
          "reasoning": f"Synthesis of {len(agent_analyses)} agents: sentiment={sentiment_score:.2%}, technical={technical_score:.2%}, risk={risk_score:.2%}",
          "next_actions": []
      }
      
      # Generate specific actions based on recommendation
      if final_recommendation in ["strong_buy", "buy"]:
          synthesis["next_actions"] = [
              "increase_position_size",
              "activate_aggressive_strategies",
              "monitor_for_entry_points"
          ]
      elif final_recommendation == "hold":
          synthesis["next_actions"] = [
              "maintain_current_positions",
              "monitor_market_conditions",
              "prepare_for_direction_change"
          ]
      elif final_recommendation in ["sell", "strong_sell"]:
          synthesis["next_actions"] = [
              "reduce_position_size",
              "activate_defensive_strategies",
              "increase_cash_reserves"
          ]
      elif final_recommendation == "avoid":
          synthesis["next_actions"] = [
              "halt_new_positions",
              "emergency_risk_reduction",
              "wait_for_risk_clearance"
          ]
      
      # Store final synthesis
      synthesis_key = f"cerebro:collaboration:{session}:synthesis"
      r.setex(synthesis_key, 3600, json.dumps(synthesis))  # Keep for 1 hour
      
      # Add to collaboration history
      r.lpush("cerebro:collaboration_history", synthesis_key)
      r.ltrim("cerebro:collaboration_history", 0, 99)  # Keep last 100
      
      print(f"🧠 Final Recommendation: {final_recommendation} (confidence: {confidence:.2%})")
      print(f"📋 Next Actions: {', '.join(synthesis['next_actions'])}")
      
      return synthesis

  # Agent 5: Action Executor
  - id: action_executor
    type: io.kestra.plugin.scripts.python.Script
    description: Execute the coordinated strategy decisions
    script: |
      import json
      import redis
      import requests
      from datetime import datetime
      
      print("⚡ Action Executor implementing decisions...")
      
      r = redis.Redis(host='localhost', port=6379, db=0, decode_responses=True)
      
      # Get synthesis from coordinator
      session = "{{ vars.collaboration_session }}"
      synthesis_key = f"cerebro:collaboration:{session}:synthesis"
      synthesis_data = r.get(synthesis_key)
      
      if not synthesis_data:
          print("❌ No synthesis data available")
          return {"status": "error", "message": "No synthesis data"}
      
      synthesis = json.loads(synthesis_data)
      recommendation = synthesis["synthesis"]["final_recommendation"]
      confidence = synthesis["synthesis"]["confidence"]
      actions = synthesis["next_actions"]
      
      executed_actions = []
      
      for action in actions:
          try:
              if action == "increase_position_size":
                  response = requests.post(
                      "http://localhost:8080/api/config/update",
                      json={"max_position_size": 2.0},
                      timeout=10
                  )
                  executed_actions.append({"action": action, "status": "success" if response.status_code == 200 else "failed"})
              
              elif action == "activate_aggressive_strategies":
                  response = requests.post(
                      "http://localhost:8080/api/strategies/sandwich/activate",
                      json={"aggressive_mode": True},
                      timeout=10
                  )
                  executed_actions.append({"action": action, "status": "success" if response.status_code == 200 else "failed"})
              
              elif action == "reduce_position_size":
                  response = requests.post(
                      "http://localhost:8080/api/config/update",
                      json={"max_position_size": 0.5},
                      timeout=10
                  )
                  executed_actions.append({"action": action, "status": "success" if response.status_code == 200 else "failed"})
              
              elif action == "halt_new_positions":
                  response = requests.post(
                      "http://localhost:8080/api/trading/halt",
                      json={"reason": "high_risk_detected"},
                      timeout=10
                  )
                  executed_actions.append({"action": action, "status": "success" if response.status_code == 200 else "failed"})
              
              else:
                  # Log action for manual implementation
                  executed_actions.append({"action": action, "status": "logged"})
          
          except Exception as e:
              executed_actions.append({"action": action, "status": "error", "error": str(e)})
      
      execution_result = {
          "executor": "action_executor",
          "timestamp": datetime.now().isoformat(),
          "session_id": session,
          "recommendation": recommendation,
          "confidence": confidence,
          "actions_executed": executed_actions,
          "success_rate": sum(1 for a in executed_actions if a["status"] == "success") / len(executed_actions) if executed_actions else 0
      }
      
      # Store execution results
      execution_key = f"cerebro:execution:{session}"
      r.setex(execution_key, 3600, json.dumps(execution_result))
      
      print(f"⚡ Executed {len(executed_actions)} actions")
      print(f"✅ Success rate: {execution_result['success_rate']:.2%}")
      
      return execution_result

triggers:
  - id: collaboration_trigger
    type: io.kestra.plugin.core.trigger.Schedule
    description: Run multi-agent collaboration every 15 minutes
    cron: "0 */15 * * * *"
    inputs:
      analysis_depth: standard
