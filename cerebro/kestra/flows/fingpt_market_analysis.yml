# FinGPT Market Analysis Flow
# Automated market analysis using FinGPT models

id: fingpt_market_analysis
namespace: cerebro.fingpt

description: |
  Comprehensive market analysis using FinGPT models.
  Combines sentiment analysis, price forecasting, and market insights.

labels:
  environment: "{{ vars.environment }}"
  type: "fingpt_analysis"
  frequency: "hourly"

inputs:
  - id: analysis_scope
    type: SELECT
    defaults: "solana_ecosystem"
    values:
      - "solana_only"
      - "solana_ecosystem"
      - "full_crypto"
    description: "Scope of market analysis"
    
  - id: include_forecasting
    type: BOOLEAN
    defaults: true
    description: "Include FinGPT price forecasting"

variables:
  cerebro_api_url: "{{ vars.cerebro_api_url }}"
  news_sources: "{{ vars.news_sources }}"

tasks:
  # 1. Collect Market News
  - id: collect_market_news
    type: io.kestra.core.tasks.scripts.Python
    description: "Collect recent market news for analysis"
    docker:
      image: python:3.11-slim
    beforeCommands:
      - pip install requests feedparser
    script: |
      import requests
      import feedparser
      import json
      from datetime import datetime, timedelta
      
      # Simulate news collection (in production, use real news APIs)
      news_items = [
          {
              "title": "Solana DeFi TVL reaches new all-time high",
              "content": "Solana's decentralized finance ecosystem continues to grow with total value locked reaching $2.5 billion, driven by increased adoption of DEX protocols and yield farming opportunities.",
              "source": "CryptoNews",
              "timestamp": datetime.now().isoformat(),
              "relevance": "high"
          },
          {
              "title": "Major institutional investor announces SOL allocation",
              "content": "A leading hedge fund has announced a significant allocation to Solana tokens, citing the network's high throughput and growing ecosystem as key factors in their investment decision.",
              "source": "BlockchainDaily",
              "timestamp": (datetime.now() - timedelta(hours=2)).isoformat(),
              "relevance": "high"
          },
          {
              "title": "Solana network upgrade improves transaction speeds",
              "content": "The latest Solana network upgrade has resulted in 15% faster transaction processing times and reduced fees, enhancing the user experience for DeFi applications.",
              "source": "TechCrypto",
              "timestamp": (datetime.now() - timedelta(hours=4)).isoformat(),
              "relevance": "medium"
          }
      ]
      
      print(json.dumps({"news_items": news_items, "total_count": len(news_items)}, indent=2))

  # 2. FinGPT Sentiment Analysis
  - id: fingpt_sentiment_analysis
    type: io.kestra.core.tasks.flows.Http
    description: "Analyze news sentiment using FinGPT"
    uri: "{{ vars.cerebro_api_url }}/api/fingpt/sentiment"
    method: POST
    contentType: application/json
    body: |
      {
        "text": "{{ outputs.collect_market_news.vars.news_items[0].content }}"
      }

  # 3. FinGPT Price Forecasting
  - id: fingpt_price_forecast
    type: io.kestra.core.tasks.flows.Http
    condition: "{{ inputs.include_forecasting }}"
    description: "Generate price forecast using FinGPT"
    uri: "{{ vars.cerebro_api_url }}/api/fingpt/forecast"
    method: POST
    contentType: application/json
    body: |
      {
        "ticker": "SOL",
        "context": {
          "current_price": 98.5,
          "volume_trend": "increasing",
          "news_sentiment": "{{ outputs.fingpt_sentiment_analysis.body.sentiment }}",
          "market_conditions": "bullish"
        }
      }

  # 4. Aggregate FinGPT Analysis
  - id: aggregate_fingpt_analysis
    type: io.kestra.core.tasks.scripts.Python
    description: "Aggregate all FinGPT analysis results"
    docker:
      image: python:3.11-slim
    script: |
      import json
      from datetime import datetime
      
      # Load analysis results
      news_data = json.loads('{{ outputs.collect_market_news.vars.news_items }}')
      sentiment_data = json.loads('{{ outputs.fingpt_sentiment_analysis.body }}')
      
      {% if inputs.include_forecasting %}
      forecast_data = json.loads('{{ outputs.fingpt_price_forecast.body }}')
      {% endif %}
      
      # Create comprehensive analysis
      analysis = {
          "analysis_timestamp": datetime.now().isoformat(),
          "scope": "{{ inputs.analysis_scope }}",
          "news_analysis": {
              "total_articles": len(news_data),
              "high_relevance_count": len([n for n in news_data if n.get("relevance") == "high"]),
              "latest_headline": news_data[0]["title"] if news_data else "No news available"
          },
          "sentiment_analysis": {
              "overall_sentiment": sentiment_data.get("sentiment", "neutral"),
              "confidence": sentiment_data.get("confidence", 0.0),
              "reasoning": sentiment_data.get("reasoning", "No analysis available"),
              "model_used": sentiment_data.get("model_used", "unknown")
          },
          {% if inputs.include_forecasting %}
          "price_forecast": {
              "direction": forecast_data.get("forecast", "neutral"),
              "confidence": forecast_data.get("confidence", 0.0),
              "timeframe": forecast_data.get("timeframe", "unknown"),
              "reasoning": forecast_data.get("reasoning", "No forecast available")
          },
          {% endif %}
          "market_insights": [],
          "trading_recommendations": [],
          "risk_assessment": "medium"
      }
      
      # Generate insights based on FinGPT analysis
      sentiment = sentiment_data.get("sentiment", "neutral")
      confidence = sentiment_data.get("confidence", 0.0)
      
      if sentiment == "positive" and confidence > 0.7:
          analysis["market_insights"].append("Strong positive sentiment detected in recent news")
          analysis["trading_recommendations"].append("Consider increasing position sizes for bullish strategies")
          analysis["risk_assessment"] = "low"
          
          {% if inputs.include_forecasting %}
          if forecast_data.get("forecast") == "up":
              analysis["trading_recommendations"].append("FinGPT forecast aligns with positive sentiment - strong buy signal")
          {% endif %}
          
      elif sentiment == "negative" and confidence > 0.7:
          analysis["market_insights"].append("Strong negative sentiment detected - exercise caution")
          analysis["trading_recommendations"].append("Reduce exposure and implement defensive strategies")
          analysis["risk_assessment"] = "high"
          
      else:
          analysis["market_insights"].append("Mixed or neutral sentiment - monitor for directional changes")
          analysis["trading_recommendations"].append("Maintain current position sizes and monitor developments")
      
      # Add FinGPT-specific insights
      analysis["fingpt_insights"] = {
          "model_performance": "High accuracy financial language understanding",
          "confidence_level": "Strong" if confidence > 0.8 else "Medium" if confidence > 0.6 else "Low",
          "recommendation_strength": "Strong" if confidence > 0.8 and sentiment != "neutral" else "Moderate"
      }
      
      print(json.dumps(analysis, indent=2))

  # 5. Store Analysis Results
  - id: store_fingpt_analysis
    type: io.kestra.core.tasks.flows.Http
    description: "Store FinGPT analysis in Cerebro memory"
    uri: "{{ vars.cerebro_api_url }}/api/memory/store"
    method: POST
    contentType: application/json
    body: |
      {
        "content": "{{ outputs.aggregate_fingpt_analysis.vars.analysis }}",
        "context_type": "fingpt_market_analysis",
        "metadata": {
          "source": "kestra_fingpt_flow",
          "execution_id": "{{ execution.id }}",
          "timestamp": "{{ execution.startDate }}",
          "analysis_scope": "{{ inputs.analysis_scope }}",
          "models_used": ["fingpt-sentiment", "fingpt-forecaster"]
        }
      }

  # 6. Generate Trading Signals
  - id: generate_trading_signals
    type: io.kestra.core.tasks.scripts.Python
    description: "Generate actionable trading signals from FinGPT analysis"
    docker:
      image: python:3.11-slim
    script: |
      import json
      from datetime import datetime
      
      analysis = json.loads('{{ outputs.aggregate_fingpt_analysis.vars.analysis }}')
      
      # Generate trading signals based on FinGPT analysis
      signals = {
          "timestamp": datetime.now().isoformat(),
          "signal_strength": "neutral",
          "recommended_action": "hold",
          "position_sizing": "normal",
          "stop_loss_level": None,
          "take_profit_level": None,
          "confidence": 0.5,
          "reasoning": "Default neutral signal"
      }
      
      sentiment = analysis["sentiment_analysis"]["overall_sentiment"]
      sentiment_confidence = analysis["sentiment_analysis"]["confidence"]
      
      {% if inputs.include_forecasting %}
      forecast = analysis["price_forecast"]["direction"]
      forecast_confidence = analysis["price_forecast"]["confidence"]
      
      # Strong bullish signal
      if sentiment == "positive" and forecast == "up" and sentiment_confidence > 0.7 and forecast_confidence > 0.7:
          signals.update({
              "signal_strength": "strong_bullish",
              "recommended_action": "buy",
              "position_sizing": "aggressive",
              "stop_loss_level": 92.0,
              "take_profit_level": 110.0,
              "confidence": min(sentiment_confidence, forecast_confidence),
              "reasoning": "FinGPT sentiment and forecast both strongly bullish"
          })
      
      # Strong bearish signal
      elif sentiment == "negative" and forecast == "down" and sentiment_confidence > 0.7 and forecast_confidence > 0.7:
          signals.update({
              "signal_strength": "strong_bearish",
              "recommended_action": "sell",
              "position_sizing": "reduced",
              "stop_loss_level": 105.0,
              "take_profit_level": 85.0,
              "confidence": min(sentiment_confidence, forecast_confidence),
              "reasoning": "FinGPT sentiment and forecast both strongly bearish"
          })
      
      # Mixed signals
      elif sentiment != forecast:
          signals.update({
              "signal_strength": "mixed",
              "recommended_action": "hold",
              "position_sizing": "conservative",
              "confidence": 0.4,
              "reasoning": "FinGPT sentiment and forecast show conflicting signals"
          })
      {% endif %}
      
      # Add strategy-specific recommendations
      signals["strategy_recommendations"] = {
          "sandwich": "normal" if signals["signal_strength"] == "neutral" else "aggressive" if "bullish" in signals["signal_strength"] else "conservative",
          "arbitrage": "active" if signals["confidence"] > 0.6 else "selective",
          "market_making": "wide_spreads" if "bearish" in signals["signal_strength"] else "tight_spreads"
      }
      
      print(json.dumps(signals, indent=2))

  # 7. Send FinGPT Analysis Report
  - id: send_fingpt_report
    type: io.kestra.core.tasks.flows.Http
    description: "Send FinGPT analysis report"
    uri: "{{ vars.notification_webhook }}"
    method: POST
    contentType: application/json
    body: |
      {
        "text": "🧠 FinGPT Market Analysis Complete",
        "attachments": [
          {
            "color": "{% if outputs.aggregate_fingpt_analysis.vars.analysis.sentiment_analysis.overall_sentiment == 'positive' %}good{% elif outputs.aggregate_fingpt_analysis.vars.analysis.sentiment_analysis.overall_sentiment == 'negative' %}danger{% else %}warning{% endif %}",
            "title": "FinGPT Market Analysis - {{ execution.startDate | date('yyyy-MM-dd HH:mm') }}",
            "fields": [
              {
                "title": "Sentiment",
                "value": "{{ outputs.aggregate_fingpt_analysis.vars.analysis.sentiment_analysis.overall_sentiment | upper }} ({{ outputs.aggregate_fingpt_analysis.vars.analysis.sentiment_analysis.confidence }})",
                "short": true
              },
              {% if inputs.include_forecasting %}
              {
                "title": "Price Forecast",
                "value": "{{ outputs.aggregate_fingpt_analysis.vars.analysis.price_forecast.direction | upper }} ({{ outputs.aggregate_fingpt_analysis.vars.analysis.price_forecast.confidence }})",
                "short": true
              },
              {% endif %}
              {
                "title": "Signal Strength",
                "value": "{{ outputs.generate_trading_signals.vars.signals.signal_strength | upper }}",
                "short": true
              },
              {
                "title": "Recommended Action",
                "value": "{{ outputs.generate_trading_signals.vars.signals.recommended_action | upper }}",
                "short": true
              }
            ],
            "text": "**FinGPT Analysis Summary:**\n{{ outputs.aggregate_fingpt_analysis.vars.analysis.sentiment_analysis.reasoning | truncate(200) }}\n\n**Trading Signal:** {{ outputs.generate_trading_signals.vars.signals.reasoning }}"
          }
        ]
      }

# Error handling
errors:
  - id: error_notification
    type: io.kestra.core.tasks.flows.Http
    description: "Send error notification"
    uri: "{{ vars.notification_webhook }}"
    method: POST
    contentType: application/json
    body: |
      {
        "text": "❌ FinGPT Market Analysis Failed",
        "attachments": [
          {
            "color": "danger",
            "title": "Flow Execution Error - {{ execution.id }}",
            "text": "The FinGPT market analysis flow failed. Please check the logs and FinGPT model availability."
          }
        ]
      }

# Triggers
triggers:
  # Run every 2 hours during market hours
  - id: market_hours_schedule
    type: io.kestra.core.models.triggers.types.Schedule
    cron: "0 */2 6-22 * * *"  # Every 2 hours from 6 AM to 10 PM
    inputs:
      analysis_scope: "solana_ecosystem"
      include_forecasting: true

  # Manual trigger for immediate analysis
  - id: manual_fingpt_analysis
    type: io.kestra.core.models.triggers.types.Webhook
    key: "fingpt_analysis_trigger"
